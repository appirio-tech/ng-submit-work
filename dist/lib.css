avatar {
  display: block;
  width: 35px;
  height: 35px;
  border-radius: 50%;
  background-color: #eee;
  overflow: hidden; }
  avatar img {
    width: 100%;
    height: 100%; }


/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlcy9hdmF0YXIuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTtFQUNFLEFBQWtCO0VBSEYsQUFJaEI7RUFKZ0IsQUFLaEI7RUFDQSxBQUFrQjtFQUNsQixBQUFrQjtFQUNsQixBQUFrQjtFQUVwQixBQUFPO0lBQ0gsQUFBUTtJQUNSLEFBQVEiLCJmaWxlIjoic3R5bGVzL2F2YXRhci5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIkYXZhdGFyLWRpYW1ldGVyOiAzNXB4O1xuXG5hdmF0YXIge1xuICBkaXNwbGF5ICAgICAgICAgOiBibG9jaztcbiAgd2lkdGggICAgICAgICAgIDogJGF2YXRhci1kaWFtZXRlcjtcbiAgaGVpZ2h0ICAgICAgICAgIDogJGF2YXRhci1kaWFtZXRlcjtcbiAgYm9yZGVyLXJhZGl1cyAgIDogNTAlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xuICBvdmVyZmxvdyAgICAgICAgOiBoaWRkZW47XG5cbiAgaW1nIHtcbiAgICB3aWR0aCA6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0= */
loader {
  position: absolute;
  display: flex;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  justify-content: center;
  align-items: center; }
  loader .container {
    padding: 24px;
    opacity: .98;
    border-radius: 10px; }
  loader .loader {
    width: 50px;
    height: 50px;
    border-top: 10px solid #d1d3d4;
    border-right: 10px solid #d1d3d4;
    border-bottom: 10px solid #d1d3d4;
    border-left: 10px solid #f0f0f0;
    -webkit-transform: translateZ(0);
    -ms-transform: translateZ(0);
    transform: translateZ(0);
    -webkit-animation: load8 .8s infinite linear;
    animation: load8 .8s infinite linear; }
  loader .loader, loader .loader:after {
    border-radius: 50%; }

@-webkit-keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg); }

  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg); } }

@keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg); }

  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg); } }


/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlcy9sb2FkZXIuc2NzcyIsIi4uL25vZGVfbW9kdWxlcy9hcHBpcmlvLXdvcmstc3R5bGVzL3N0eWxlcy9fdmFyaWFibGVzLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7RUFDRSxBQUFpQjtFQUNqQixBQUFpQjtFQUNqQixBQUFpQjtFQUNqQixBQUFpQjtFQUNqQixBQUFpQjtFQUNqQixBQUFpQjtFQUNqQixBQUFpQjtFQUNqQixBQUFpQjtFQUVuQixBQUFPO0lDRFksQURFZjtJQUVBLEFBQWtCO0lDMEJHLEFEekJyQjtFQUdKLEFBQU87SUFDSCxBQUFPO0lBQ1AsQUFBUTtJQUNSLEFBQW1CO0lBQ25CLEFBQW1CO0lBQ25CLEFBQW1CO0lBQ25CLEFBQW1CO0lBQ25CLEFBQW1CO0lBQ25CLEFBQW1CO0lBQ25CLEFBQW1CO0lBQ25CLEFBQW1CO0lBQ25CLEFBQW1CO0VBRXZCLEFBQU8sQUFBUyxBQUFPLEFBQU87SUFFMUIsQUFBZTs7bUJBTUE7RUFDbkI7SUFDSSxBQUFtQjtJQUNuQixBQUFXOztFQUVmO0lBQ0ksQUFBbUI7SUFDbkIsQUFBVzs7V0FJSjtFQUNYO0lBQ0ksQUFBbUI7SUFDbkIsQUFBVzs7RUFFZjtJQUNJLEFBQW1CO0lBQ25CLEFBQVciLCJmaWxlIjoic3R5bGVzL2xvYWRlci5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJAaW1wb3J0IFwid29yay1pbmNsdWRlc1wiO1xuXG5sb2FkZXIge1xuICBwb3NpdGlvbiAgICAgICA6IGFic29sdXRlO1xuICBkaXNwbGF5ICAgICAgICA6IGZsZXg7XG4gIHRvcCAgICAgICAgICAgIDogMDtcbiAgbGVmdCAgICAgICAgICAgOiAwO1xuICB3aWR0aCAgICAgICAgICA6IDEwMCU7XG4gIGhlaWdodCAgICAgICAgIDogMTAwJTtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zICAgIDogY2VudGVyO1xuXG4gIC5jb250YWluZXIge1xuICAgIHBhZGRpbmcgICAgICAgICA6ICRzcGFjaW5nLWJpZ2dlc3Q7XG4gICAgLy8gYmFja2dyb3VuZC1jb2xvcjogJHByaW1hcnktY29sb3I7XG4gICAgb3BhY2l0eSAgICAgICAgIDogLjk4O1xuICAgIGJvcmRlci1yYWRpdXMgICA6ICRib3JkZXItcmFkaXVzLWJpZ2dlc3Q7XG4gIH1cblxuICAubG9hZGVyIHtcbiAgICB3aWR0aDogNTBweDtcbiAgICBoZWlnaHQ6IDUwcHg7XG4gICAgYm9yZGVyLXRvcCAgICAgICA6IDEwcHggc29saWQgJG5ldXRyYWwtY29sb3ItbGlnaHQ7XG4gICAgYm9yZGVyLXJpZ2h0ICAgICA6IDEwcHggc29saWQgJG5ldXRyYWwtY29sb3ItbGlnaHQ7XG4gICAgYm9yZGVyLWJvdHRvbSAgICA6IDEwcHggc29saWQgJG5ldXRyYWwtY29sb3ItbGlnaHQ7XG4gICAgYm9yZGVyLWxlZnQgICAgICA6IDEwcHggc29saWQgJG5ldXRyYWwtY29sb3ItbGlnaHRlc3QgO1xuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xuICAgIC1tcy10cmFuc2Zvcm0gICAgOiB0cmFuc2xhdGVaKDApO1xuICAgIHRyYW5zZm9ybSAgICAgICAgOiB0cmFuc2xhdGVaKDApO1xuICAgIC13ZWJraXQtYW5pbWF0aW9uOiBsb2FkOCAuOHMgaW5maW5pdGUgbGluZWFyO1xuICAgIGFuaW1hdGlvbiAgICAgICAgOiBsb2FkOCAuOHMgaW5maW5pdGUgbGluZWFyO1xuICB9XG4gIC5sb2FkZXIsXG4gIC5sb2FkZXI6YWZ0ZXIge1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgfVxuXG5cbn1cblxuQC13ZWJraXQta2V5ZnJhbWVzIGxvYWQ4IHtcbiAgMCUge1xuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XG4gIH1cbiAgMTAwJSB7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XG4gIH1cbn1cblxuQGtleWZyYW1lcyBsb2FkOCB7XG4gIDAlIHtcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICB9XG4gIDEwMCUge1xuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICB9XG59IiwiLy8gZGlzYWJsZSBib3JkZXItYm94LXNpemluZyBpbiBib3VyYm9uLW5lYXRcbiRib3JkZXItYm94LXNpemluZzogZmFsc2U7XG5cbiRzcGFjaW5nICAgICAgICAgOiAxNHB4O1xuJHNwYWNpbmctYmlnICAgICA6IDE4cHg7XG4kc3BhY2luZy1iaWdnZXN0IDogMjRweDtcbiRzcGFjaW5nLXNtYWxsICAgOiAxMHB4O1xuJHNwYWNpbmctc21hbGxlc3Q6IDZweDtcblxuJHNwYWNpbmcgICAgICAgICA6IDE0cHg7XG4kc3BhY2luZy1iaWcgICAgIDogMThweDtcbiRzcGFjaW5nLWJpZ2dlc3QgOiAyNHB4O1xuJHNwYWNpbmctc21hbGwgICA6IDEwcHg7XG4kc3BhY2luZy1zbWFsbGVzdDogNnB4O1xuXG4kcGFkZGluZyAgICAgICAgIDogMTZweDtcbiRwYWRkaW5nLWJpZyAgICAgOiAzMnB4O1xuJHBhZGRpbmctYmlnZ2VzdCA6IDY0cHg7XG4kcGFkZGluZy1zbWFsbCAgIDogOHB4O1xuJHBhZGRpbmctc21hbGxlc3Q6IDRweDtcblxuJG1hcmdpbiAgICAgICAgIDogMzJweDtcbiRtYXJnaW4tYmlnICAgICA6IDY0cHg7XG4kbWFyZ2luLWJpZ2dlc3QgOiAxMjhweDtcbiRtYXJnaW4tc21hbGwgICA6IDE2cHg7XG4kbWFyZ2luLXNtYWxsZXN0OiA4cHg7XG5cbiRmb250LXNpemUgICAgICAgICA6IDE0cHg7XG4kZm9udC1zaXplLWJpZyAgICAgOiAxOHB4O1xuJGZvbnQtc2l6ZS1iaWdnZXN0IDogMjRweDtcbiRmb250LXNpemUtc21hbGwgICA6IDEwcHg7XG4kZm9udC1zaXplLXNtYWxsZXN0OiA4cHg7XG5cbiRsaW5lLWhlaWdodCAgICAgICAgIDogMTZweDtcbiRsaW5lLWhlaWdodC1iaWcgICAgIDogMjBweDtcbiRsaW5lLWhlaWdodC1iaWdnZXN0IDogMjZweDtcbiRsaW5lLWhlaWdodC1zbWFsbCAgIDogMTJweDtcbiRsaW5lLWhlaWdodC1zbWFsbGVzdDogMTBweDtcblxuJGJvcmRlci1yYWRpdXMgICAgICAgICA6IDZweDtcbiRib3JkZXItcmFkaXVzLWJpZyAgICAgOiA4cHg7XG4kYm9yZGVyLXJhZGl1cy1iaWdnZXN0IDogMTBweDtcbiRib3JkZXItcmFkaXVzLXNtYWxsICAgOiA0cHg7XG4kYm9yZGVyLXJhZGl1cy1zbWFsbGVzdDogMnB4O1xuXG4kYmxhY2s6ICMwMDA7XG4kd2hpdGU6ICNmZmY7XG5cbiRwcmltYXJ5LWNvbG9yOiAjMDBhZWZmO1xuJGFjY2VudC1jb2xvciA6ICMwMDk2ZmY7XG4kc3VjY2Vzcy1jb2xvcjogIzk5Y2MwMDtcbiRkYW5nZXItY29sb3IgOiAjZmYwMDY2O1xuJHdhcm5pbmctY29sb3I6ICNEQUQ3MTQ7XG5cbiRuZXV0cmFsLWNvbG9yICAgICAgICAgOiAjYjdiN2I3O1xuJG5ldXRyYWwtY29sb3ItZGFyayAgICA6ICM3ZjdmN2Y7XG4kbmV1dHJhbC1jb2xvci1kYXJrZXN0IDogIzNkM2QzZDtcbiRuZXV0cmFsLWNvbG9yLWxpZ2h0ICAgOiAjZDFkM2Q0O1xuJG5ldXRyYWwtY29sb3ItbGlnaHRlc3Q6ICNmMGYwZjA7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0= */
#modal-overlay {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  z-index: 10;
  background-color: rgba(0, 0, 0, 0.6); }

modal {
  -webkit-box-align: center;
  -moz-box-align: center;
  box-align: center;
  -webkit-align-items: center;
  -moz-align-items: center;
  -ms-align-items: center;
  -o-align-items: center;
  align-items: center;
  -ms-flex-align: center;
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 11; }
  modal.show {
    display: -webkit-box;
    display: -moz-box;
    display: box;
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: center;
    -moz-box-pack: center;
    box-pack: center;
    -webkit-justify-content: center;
    -moz-justify-content: center;
    -ms-justify-content: center;
    -o-justify-content: center;
    justify-content: center;
    -ms-flex-pack: center;
    -webkit-box-align: center;
    -moz-box-align: center;
    box-align: center;
    -webkit-align-items: center;
    -moz-align-items: center;
    -ms-align-items: center;
    -o-align-items: center;
    align-items: center;
    -ms-flex-align: center;
    -webkit-box-lines: multiple;
    -moz-box-lines: multiple;
    box-lines: multiple;
    -webkit-flex-wrap: wrap;
    -moz-flex-wrap: wrap;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap; }
  modal .close {
    position: absolute;
    right: 14px;
    top: 14px;
    padding: 10px;
    background-color: white; }


/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlcy9tb2RhbC5zY3NzIiwiLi4vbm9kZV9tb2R1bGVzL2FwcGlyaW8td29yay1zdHlsZXMvbm9kZV9tb2R1bGVzL25vZGUtbmVhdC9ub2RlX21vZHVsZXMvbm9kZS1ib3VyYm9uL25vZGVfbW9kdWxlcy9ib3VyYm9uL2FwcC9hc3NldHMvc3R5bGVzaGVldHMvYWRkb25zL19wcmVmaXhlci5zY3NzIiwiLi4vbm9kZV9tb2R1bGVzL2FwcGlyaW8td29yay1zdHlsZXMvbm9kZV9tb2R1bGVzL25vZGUtbmVhdC9ub2RlX21vZHVsZXMvbm9kZS1ib3VyYm9uL25vZGVfbW9kdWxlcy9ib3VyYm9uL2FwcC9hc3NldHMvc3R5bGVzaGVldHMvY3NzMy9fZmxleC1ib3guc2NzcyIsIi4uL25vZGVfbW9kdWxlcy9hcHBpcmlvLXdvcmstc3R5bGVzL3N0eWxlcy9fbWl4aW5zLnNjc3MiLCIuLi9ub2RlX21vZHVsZXMvYXBwaXJpby13b3JrLXN0eWxlcy9zdHlsZXMvX3ZhcmlhYmxlcy5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBO0VBQ0UsQUFBa0I7RUFDbEIsQUFBa0I7RUFDbEIsQUFBa0I7RUFDbEIsQUFBa0I7RUFDbEIsQUFBa0I7RUFDbEIsQUFBa0I7RUFDbEIsQUFBa0I7RUFDbEIsQUFBa0I7O0FBR3BCO0VDc0JRLEFEckJlO0VDeUJmLEFEekJlO0VDcUNmLEFEckNlO0VDcUJmLEFEckJlO0VDeUJmLEFEekJlO0VDNkJmLEFEN0JlO0VDaUNmLEFEakNlO0VDcUNmLEFEckNlO0VFdU9yQixBRnZPcUI7RUFFckIsQUFBVTtFQUNWLEFBQVU7RUFDVixBQUFVO0VBQ1YsQUFBVTtFQUNWLEFBQVU7RUFDVixBQUFVO0VBQ1YsQUFBVTtFQUVaLEFBQUs7SUU2Q0QsQUFBUztJQUNULEFBQVM7SUFDVCxBQUFTO0lBR1QsQUFBUztJQUNULEFBQVM7SUFDVCxBQUFTO0lBQ1QsQUFBUztJRDFDTCxBRFZpQjtJQ2NqQixBRGRpQjtJQzBCakIsQUQxQmlCO0lDVWpCLEFEVmlCO0lDY2pCLEFEZGlCO0lDa0JqQixBRGxCaUI7SUNzQmpCLEFEdEJpQjtJQzBCakIsQUQxQmlCO0lFcU12QixBRnJNdUI7SUNVakIsQUVBZTtJRklmLEFFSmU7SUZnQmYsQUVoQmU7SUZBZixBRUFlO0lGSWYsQUVKZTtJRlFmLEFFUmU7SUZZZixBRVplO0lGZ0JmLEFFaEJlO0lEa05yQixBQ2xOcUI7SUZBZixBQ21IUTtJRC9HUixBQytHUTtJRG5HUixBQ21HUTtJRG5IUixBRUNhO0lGR2IsQUVIYTtJRk9iLEFFUGE7SUZlYixBRWZhO0VIUnJCLEFBQU07SUFDRixBQUFrQjtJSXBCSCxBSnFCZjtJSXJCZSxBSnNCZjtJSW5CZSxBSm9CZjtJQUNBLEFBQWtCIiwiZmlsZSI6InN0eWxlcy9tb2RhbC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJAaW1wb3J0IFwid29yay1pbmNsdWRlc1wiO1xuXG4jbW9kYWwtb3ZlcmxheSB7XG4gIGRpc3BsYXkgICAgICAgICA6IG5vbmU7XG4gIHBvc2l0aW9uICAgICAgICA6IGZpeGVkO1xuICB0b3AgICAgICAgICAgICAgOiAwO1xuICBsZWZ0ICAgICAgICAgICAgOiAwO1xuICBoZWlnaHQgICAgICAgICAgOiAxMDAlO1xuICB3aWR0aCAgICAgICAgICAgOiAxMDAlO1xuICB6LWluZGV4ICAgICAgICAgOiAxMDtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLDAsMCwwLjYpO1xufVxuXG5tb2RhbCB7XG4gIEBpbmNsdWRlIGFsaWduLWl0ZW1zKGNlbnRlcik7XG5cbiAgZGlzcGxheSA6IG5vbmU7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wICAgICA6IDA7XG4gIGxlZnQgICAgOiAwO1xuICB3aWR0aCAgIDogMTAwJTtcbiAgaGVpZ2h0ICA6IDEwMCU7XG4gIHotaW5kZXggOiAxMTtcblxuICAmLnNob3cge1xuICAgIEBpbmNsdWRlIGZsZXgtY2VudGVyKGNlbnRlcik7XG4gIH1cblxuICAuY2xvc2Uge1xuICAgIHBvc2l0aW9uICAgICAgICA6IGFic29sdXRlO1xuICAgIHJpZ2h0ICAgICAgICAgICA6ICRzcGFjaW5nO1xuICAgIHRvcCAgICAgICAgICAgICA6ICRzcGFjaW5nO1xuICAgIHBhZGRpbmcgICAgICAgICA6ICRzcGFjaW5nLXNtYWxsO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICB9XG59XG5cbiIsIkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vIEEgbWl4aW4gZm9yIGdlbmVyYXRpbmcgdmVuZG9yIHByZWZpeGVzIG9uIG5vbi1zdGFuZGFyZGl6ZWQgcHJvcGVydGllcy5cbi8vL1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkcHJvcGVydHlcbi8vLyAgIFByb3BlcnR5IHRvIHByZWZpeFxuLy8vXG4vLy8gQHBhcmFtIHsqfSAkdmFsdWVcbi8vLyAgIFZhbHVlIHRvIHVzZVxuLy8vXG4vLy8gQHBhcmFtIHtMaXN0fSAkcHJlZml4ZXNcbi8vLyAgIFByZWZpeGVzIHRvIGRlZmluZVxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzYWdlXG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIEBpbmNsdWRlIHByZWZpeGVyKGJvcmRlci1yYWRpdXMsIDEwcHgsIHdlYmtpdCBtcyBzcGVjKTtcbi8vLyAgIH1cbi8vL1xuLy8vIEBleGFtcGxlIGNzcyAtIENTUyBPdXRwdXRcbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAxMHB4O1xuLy8vICAgICAtbW96LWJvcmRlci1yYWRpdXM6IDEwcHg7XG4vLy8gICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4vLy8gICB9XG4vLy9cbi8vLyBAcmVxdWlyZSB7dmFyaWFibGV9ICRwcmVmaXgtZm9yLXdlYmtpdFxuLy8vIEByZXF1aXJlIHt2YXJpYWJsZX0gJHByZWZpeC1mb3ItbW96aWxsYVxuLy8vIEByZXF1aXJlIHt2YXJpYWJsZX0gJHByZWZpeC1mb3ItbWljcm9zb2Z0XG4vLy8gQHJlcXVpcmUge3ZhcmlhYmxlfSAkcHJlZml4LWZvci1vcGVyYVxuLy8vIEByZXF1aXJlIHt2YXJpYWJsZX0gJHByZWZpeC1mb3Itc3BlY1xuXG5AbWl4aW4gcHJlZml4ZXIoJHByb3BlcnR5LCAkdmFsdWUsICRwcmVmaXhlcykge1xuICBAZWFjaCAkcHJlZml4IGluICRwcmVmaXhlcyB7XG4gICAgQGlmICRwcmVmaXggPT0gd2Via2l0IHtcbiAgICAgIEBpZiAkcHJlZml4LWZvci13ZWJraXQge1xuICAgICAgICAtd2Via2l0LSN7JHByb3BlcnR5fTogJHZhbHVlO1xuICAgICAgfVxuICAgIH0gQGVsc2UgaWYgJHByZWZpeCA9PSBtb3oge1xuICAgICAgQGlmICRwcmVmaXgtZm9yLW1vemlsbGEge1xuICAgICAgICAtbW96LSN7JHByb3BlcnR5fTogJHZhbHVlO1xuICAgICAgfVxuICAgIH0gQGVsc2UgaWYgJHByZWZpeCA9PSBtcyB7XG4gICAgICBAaWYgJHByZWZpeC1mb3ItbWljcm9zb2Z0IHtcbiAgICAgICAgLW1zLSN7JHByb3BlcnR5fTogJHZhbHVlO1xuICAgICAgfVxuICAgIH0gQGVsc2UgaWYgJHByZWZpeCA9PSBvIHtcbiAgICAgIEBpZiAkcHJlZml4LWZvci1vcGVyYSB7XG4gICAgICAgIC1vLSN7JHByb3BlcnR5fTogJHZhbHVlO1xuICAgICAgfVxuICAgIH0gQGVsc2UgaWYgJHByZWZpeCA9PSBzcGVjIHtcbiAgICAgIEBpZiAkcHJlZml4LWZvci1zcGVjIHtcbiAgICAgICAgI3skcHJvcGVydHl9OiAkdmFsdWU7XG4gICAgICB9XG4gICAgfSBAZWxzZSAge1xuICAgICAgQHdhcm4gXCJVbnJlY29nbml6ZWQgcHJlZml4OiAjeyRwcmVmaXh9XCI7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBkaXNhYmxlLXByZWZpeC1mb3ItYWxsKCkge1xuICAkcHJlZml4LWZvci13ZWJraXQ6ICAgIGZhbHNlICFnbG9iYWw7XG4gICRwcmVmaXgtZm9yLW1vemlsbGE6ICAgZmFsc2UgIWdsb2JhbDtcbiAgJHByZWZpeC1mb3ItbWljcm9zb2Z0OiBmYWxzZSAhZ2xvYmFsO1xuICAkcHJlZml4LWZvci1vcGVyYTogICAgIGZhbHNlICFnbG9iYWw7XG4gICRwcmVmaXgtZm9yLXNwZWM6ICAgICAgZmFsc2UgIWdsb2JhbDtcbn1cbiIsIi8vIENTUzMgRmxleGlibGUgQm94IE1vZGVsIGFuZCBwcm9wZXJ0eSBkZWZhdWx0c1xuXG4vLyBDdXN0b20gc2hvcnRoYW5kIG5vdGF0aW9uIGZvciBmbGV4Ym94XG5AbWl4aW4gYm94KCRvcmllbnQ6IGlubGluZS1heGlzLCAkcGFjazogc3RhcnQsICRhbGlnbjogc3RyZXRjaCkge1xuICBAaW5jbHVkZSBkaXNwbGF5LWJveDtcbiAgQGluY2x1ZGUgYm94LW9yaWVudCgkb3JpZW50KTtcbiAgQGluY2x1ZGUgYm94LXBhY2soJHBhY2spO1xuICBAaW5jbHVkZSBib3gtYWxpZ24oJGFsaWduKTtcbn1cblxuQG1peGluIGRpc3BsYXktYm94IHtcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gIGRpc3BsYXk6IC1tb3otYm94O1xuICBkaXNwbGF5OiAtbXMtZmxleGJveDsgLy8gSUUgMTBcbiAgZGlzcGxheTogYm94O1xufVxuXG5AbWl4aW4gYm94LW9yaWVudCgkb3JpZW50OiBpbmxpbmUtYXhpcykge1xuLy8gaG9yaXpvbnRhbHx2ZXJ0aWNhbHxpbmxpbmUtYXhpc3xibG9jay1heGlzfGluaGVyaXRcbiAgQGluY2x1ZGUgcHJlZml4ZXIoYm94LW9yaWVudCwgJG9yaWVudCwgd2Via2l0IG1veiBzcGVjKTtcbn1cblxuQG1peGluIGJveC1wYWNrKCRwYWNrOiBzdGFydCkge1xuLy8gc3RhcnR8ZW5kfGNlbnRlcnxqdXN0aWZ5XG4gIEBpbmNsdWRlIHByZWZpeGVyKGJveC1wYWNrLCAkcGFjaywgd2Via2l0IG1veiBzcGVjKTtcbiAgLW1zLWZsZXgtcGFjazogJHBhY2s7IC8vIElFIDEwXG59XG5cbkBtaXhpbiBib3gtYWxpZ24oJGFsaWduOiBzdHJldGNoKSB7XG4vLyBzdGFydHxlbmR8Y2VudGVyfGJhc2VsaW5lfHN0cmV0Y2hcbiAgQGluY2x1ZGUgcHJlZml4ZXIoYm94LWFsaWduLCAkYWxpZ24sIHdlYmtpdCBtb3ogc3BlYyk7XG4gIC1tcy1mbGV4LWFsaWduOiAkYWxpZ247IC8vIElFIDEwXG59XG5cbkBtaXhpbiBib3gtZGlyZWN0aW9uKCRkaXJlY3Rpb246IG5vcm1hbCkge1xuLy8gbm9ybWFsfHJldmVyc2V8aW5oZXJpdFxuICBAaW5jbHVkZSBwcmVmaXhlcihib3gtZGlyZWN0aW9uLCAkZGlyZWN0aW9uLCB3ZWJraXQgbW96IHNwZWMpO1xuICAtbXMtZmxleC1kaXJlY3Rpb246ICRkaXJlY3Rpb247IC8vIElFIDEwXG59XG5cbkBtaXhpbiBib3gtbGluZXMoJGxpbmVzOiBzaW5nbGUpIHtcbi8vIHNpbmdsZXxtdWx0aXBsZVxuICBAaW5jbHVkZSBwcmVmaXhlcihib3gtbGluZXMsICRsaW5lcywgd2Via2l0IG1veiBzcGVjKTtcbn1cblxuQG1peGluIGJveC1vcmRpbmFsLWdyb3VwKCRpbnQ6IDEpIHtcbiAgQGluY2x1ZGUgcHJlZml4ZXIoYm94LW9yZGluYWwtZ3JvdXAsICRpbnQsIHdlYmtpdCBtb3ogc3BlYyk7XG4gIC1tcy1mbGV4LW9yZGVyOiAkaW50OyAvLyBJRSAxMFxufVxuXG5AbWl4aW4gYm94LWZsZXgoJHZhbHVlOiAwKSB7XG4gIEBpbmNsdWRlIHByZWZpeGVyKGJveC1mbGV4LCAkdmFsdWUsIHdlYmtpdCBtb3ogc3BlYyk7XG4gIC1tcy1mbGV4OiAkdmFsdWU7IC8vIElFIDEwXG59XG5cbkBtaXhpbiBib3gtZmxleC1ncm91cCgkaW50OiAxKSB7XG4gIEBpbmNsdWRlIHByZWZpeGVyKGJveC1mbGV4LWdyb3VwLCAkaW50LCB3ZWJraXQgbW96IHNwZWMpO1xufVxuXG4vLyBDU1MzIEZsZXhpYmxlIEJveCBNb2RlbCBhbmQgcHJvcGVydHkgZGVmYXVsdHNcbi8vIFVuaWZpZWQgYXR0cmlidXRlcyBmb3IgMjAwOSwgMjAxMSwgYW5kIDIwMTIgZmxhdm91cnMuXG5cbi8vIDIwMDkgLSBkaXNwbGF5IChib3ggfCBpbmxpbmUtYm94KVxuLy8gMjAxMSAtIGRpc3BsYXkgKGZsZXhib3ggfCBpbmxpbmUtZmxleGJveClcbi8vIDIwMTIgLSBkaXNwbGF5IChmbGV4IHwgaW5saW5lLWZsZXgpXG5AbWl4aW4gZGlzcGxheSgkdmFsdWUpIHtcbi8vIGZsZXggfCBpbmxpbmUtZmxleFxuICBAaWYgJHZhbHVlID09IFwiZmxleFwiIHtcbiAgICAvLyAyMDA5XG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gICAgZGlzcGxheTogLW1vei1ib3g7XG4gICAgZGlzcGxheTogYm94O1xuXG4gICAgLy8gMjAxMlxuICAgIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcbiAgICBkaXNwbGF5OiAtbW96LWZsZXg7XG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7IC8vIDIwMTEgKElFIDEwKVxuICAgIGRpc3BsYXk6IGZsZXg7XG4gIH0gQGVsc2UgaWYgJHZhbHVlID09IFwiaW5saW5lLWZsZXhcIiB7XG4gICAgZGlzcGxheTogLXdlYmtpdC1pbmxpbmUtYm94O1xuICAgIGRpc3BsYXk6IC1tb3otaW5saW5lLWJveDtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYm94O1xuXG4gICAgZGlzcGxheTogLXdlYmtpdC1pbmxpbmUtZmxleDtcbiAgICBkaXNwbGF5OiAtbW96LWlubGluZS1mbGV4O1xuICAgIGRpc3BsYXk6IC1tcy1pbmxpbmUtZmxleGJveDtcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgfSBAZWxzZSB7XG4gICAgZGlzcGxheTogJHZhbHVlO1xuICB9XG59XG5cbi8vIDIwMDkgLSBib3gtZmxleCAoaW50ZWdlcilcbi8vIDIwMTEgLSBmbGV4IChkZWNpbWFsIHwgd2lkdGggZGVjaW1hbClcbi8vIDIwMTIgLSBmbGV4IChpbnRlZ2VyIGludGVnZXIgd2lkdGgpXG5AbWl4aW4gZmxleCgkdmFsdWUpIHtcblxuICAvLyBHcmFiIGZsZXgtZ3JvdyBmb3Igb2xkZXIgYnJvd3NlcnMuXG4gICRmbGV4LWdyb3c6IG50aCgkdmFsdWUsIDEpO1xuXG4gIC8vIDIwMDlcbiAgQGluY2x1ZGUgcHJlZml4ZXIoYm94LWZsZXgsICRmbGV4LWdyb3csIHdlYmtpdCBtb3ogc3BlYyk7XG5cbiAgLy8gMjAxMSAoSUUgMTApLCAyMDEyXG4gIEBpbmNsdWRlIHByZWZpeGVyKGZsZXgsICR2YWx1ZSwgd2Via2l0IG1veiBtcyBzcGVjKTtcbn1cblxuLy8gMjAwOSAtIGJveC1vcmllbnQgKCBob3Jpem9udGFsIHwgdmVydGljYWwgfCBpbmxpbmUtYXhpcyB8IGJsb2NrLWF4aXMpXG4vLyAgICAgIC0gYm94LWRpcmVjdGlvbiAobm9ybWFsIHwgcmV2ZXJzZSlcbi8vIDIwMTEgLSBmbGV4LWRpcmVjdGlvbiAocm93IHwgcm93LXJldmVyc2UgfCBjb2x1bW4gfCBjb2x1bW4tcmV2ZXJzZSlcbi8vIDIwMTIgLSBmbGV4LWRpcmVjdGlvbiAocm93IHwgcm93LXJldmVyc2UgfCBjb2x1bW4gfCBjb2x1bW4tcmV2ZXJzZSlcbkBtaXhpbiBmbGV4LWRpcmVjdGlvbigkdmFsdWU6IHJvdykge1xuXG4gIC8vIEFsdCB2YWx1ZXMuXG4gICR2YWx1ZS0yMDA5OiAkdmFsdWU7XG4gICR2YWx1ZS0yMDExOiAkdmFsdWU7XG4gICRkaXJlY3Rpb246IG5vcm1hbDtcblxuICBAaWYgJHZhbHVlID09IHJvdyB7XG4gICAgJHZhbHVlLTIwMDk6IGhvcml6b250YWw7XG4gIH0gQGVsc2UgaWYgJHZhbHVlID09IFwicm93LXJldmVyc2VcIiB7XG4gICAgJHZhbHVlLTIwMDk6IGhvcml6b250YWw7XG4gICAgJGRpcmVjdGlvbjogcmV2ZXJzZTtcbiAgfSBAZWxzZSBpZiAkdmFsdWUgPT0gY29sdW1uIHtcbiAgICAkdmFsdWUtMjAwOTogdmVydGljYWw7XG4gIH0gQGVsc2UgaWYgJHZhbHVlID09IFwiY29sdW1uLXJldmVyc2VcIiB7XG4gICAgJHZhbHVlLTIwMDk6IHZlcnRpY2FsO1xuICAgICRkaXJlY3Rpb246IHJldmVyc2U7XG4gIH1cblxuICAvLyAyMDA5XG4gIEBpbmNsdWRlIHByZWZpeGVyKGJveC1vcmllbnQsICR2YWx1ZS0yMDA5LCB3ZWJraXQgbW96IHNwZWMpO1xuICBAaW5jbHVkZSBwcmVmaXhlcihib3gtZGlyZWN0aW9uLCAkZGlyZWN0aW9uLCB3ZWJraXQgbW96IHNwZWMpO1xuXG4gIC8vIDIwMTJcbiAgQGluY2x1ZGUgcHJlZml4ZXIoZmxleC1kaXJlY3Rpb24sICR2YWx1ZSwgd2Via2l0IG1veiBzcGVjKTtcblxuICAvLyAyMDExIChJRSAxMClcbiAgLW1zLWZsZXgtZGlyZWN0aW9uOiAkdmFsdWU7XG59XG5cbi8vIDIwMDkgLSBib3gtbGluZXMgKHNpbmdsZSB8IG11bHRpcGxlKVxuLy8gMjAxMSAtIGZsZXgtd3JhcCAobm93cmFwIHwgd3JhcCB8IHdyYXAtcmV2ZXJzZSlcbi8vIDIwMTIgLSBmbGV4LXdyYXAgKG5vd3JhcCB8IHdyYXAgfCB3cmFwLXJldmVyc2UpXG5AbWl4aW4gZmxleC13cmFwKCR2YWx1ZTogbm93cmFwKSB7XG4gIC8vIEFsdCB2YWx1ZXNcbiAgJGFsdC12YWx1ZTogJHZhbHVlO1xuICBAaWYgJHZhbHVlID09IG5vd3JhcCB7XG4gICAgJGFsdC12YWx1ZTogc2luZ2xlO1xuICB9IEBlbHNlIGlmICR2YWx1ZSA9PSB3cmFwIHtcbiAgICAkYWx0LXZhbHVlOiBtdWx0aXBsZTtcbiAgfSBAZWxzZSBpZiAkdmFsdWUgPT0gXCJ3cmFwLXJldmVyc2VcIiB7XG4gICAgJGFsdC12YWx1ZTogbXVsdGlwbGU7XG4gIH1cblxuICBAaW5jbHVkZSBwcmVmaXhlcihib3gtbGluZXMsICRhbHQtdmFsdWUsIHdlYmtpdCBtb3ogc3BlYyk7XG4gIEBpbmNsdWRlIHByZWZpeGVyKGZsZXgtd3JhcCwgJHZhbHVlLCB3ZWJraXQgbW96IG1zIHNwZWMpO1xufVxuXG4vLyAyMDA5IC0gVE9ETzogcGFyc2UgdmFsdWVzIGludG8gZmxleC1kaXJlY3Rpb24vZmxleC13cmFwXG4vLyAyMDExIC0gVE9ETzogcGFyc2UgdmFsdWVzIGludG8gZmxleC1kaXJlY3Rpb24vZmxleC13cmFwXG4vLyAyMDEyIC0gZmxleC1mbG93IChmbGV4LWRpcmVjdGlvbiB8fCBmbGV4LXdyYXApXG5AbWl4aW4gZmxleC1mbG93KCR2YWx1ZSkge1xuICBAaW5jbHVkZSBwcmVmaXhlcihmbGV4LWZsb3csICR2YWx1ZSwgd2Via2l0IG1veiBzcGVjKTtcbn1cblxuLy8gMjAwOSAtIGJveC1vcmRpbmFsLWdyb3VwIChpbnRlZ2VyKVxuLy8gMjAxMSAtIGZsZXgtb3JkZXIgKGludGVnZXIpXG4vLyAyMDEyIC0gb3JkZXIgKGludGVnZXIpXG5AbWl4aW4gb3JkZXIoJGludDogMCkge1xuICAvLyAyMDA5XG4gIEBpbmNsdWRlIHByZWZpeGVyKGJveC1vcmRpbmFsLWdyb3VwLCAkaW50LCB3ZWJraXQgbW96IHNwZWMpO1xuXG4gIC8vIDIwMTJcbiAgQGluY2x1ZGUgcHJlZml4ZXIob3JkZXIsICRpbnQsIHdlYmtpdCBtb3ogc3BlYyk7XG5cbiAgLy8gMjAxMSAoSUUgMTApXG4gIC1tcy1mbGV4LW9yZGVyOiAkaW50O1xufVxuXG4vLyAyMDEyIC0gZmxleC1ncm93IChudW1iZXIpXG5AbWl4aW4gZmxleC1ncm93KCRudW1iZXI6IDApIHtcbiAgQGluY2x1ZGUgcHJlZml4ZXIoZmxleC1ncm93LCAkbnVtYmVyLCB3ZWJraXQgbW96IHNwZWMpO1xuICAtbXMtZmxleC1wb3NpdGl2ZTogJG51bWJlcjtcbn1cblxuLy8gMjAxMiAtIGZsZXgtc2hyaW5rIChudW1iZXIpXG5AbWl4aW4gZmxleC1zaHJpbmsoJG51bWJlcjogMSkge1xuICBAaW5jbHVkZSBwcmVmaXhlcihmbGV4LXNocmluaywgJG51bWJlciwgd2Via2l0IG1veiBzcGVjKTtcbiAgLW1zLWZsZXgtbmVnYXRpdmU6ICRudW1iZXI7XG59XG5cbi8vIDIwMTIgLSBmbGV4LWJhc2lzIChudW1iZXIpXG5AbWl4aW4gZmxleC1iYXNpcygkd2lkdGg6IGF1dG8pIHtcbiAgQGluY2x1ZGUgcHJlZml4ZXIoZmxleC1iYXNpcywgJHdpZHRoLCB3ZWJraXQgbW96IHNwZWMpO1xuICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogJHdpZHRoO1xufVxuXG4vLyAyMDA5IC0gYm94LXBhY2sgKHN0YXJ0IHwgZW5kIHwgY2VudGVyIHwganVzdGlmeSlcbi8vIDIwMTEgLSBmbGV4LXBhY2sgKHN0YXJ0IHwgZW5kIHwgY2VudGVyIHwganVzdGlmeSlcbi8vIDIwMTIgLSBqdXN0aWZ5LWNvbnRlbnQgKGZsZXgtc3RhcnQgfCBmbGV4LWVuZCB8IGNlbnRlciB8IHNwYWNlLWJldHdlZW4gfCBzcGFjZS1hcm91bmQpXG5AbWl4aW4ganVzdGlmeS1jb250ZW50KCR2YWx1ZTogZmxleC1zdGFydCkge1xuXG4gIC8vIEFsdCB2YWx1ZXMuXG4gICRhbHQtdmFsdWU6ICR2YWx1ZTtcbiAgQGlmICR2YWx1ZSA9PSBcImZsZXgtc3RhcnRcIiB7XG4gICAgJGFsdC12YWx1ZTogc3RhcnQ7XG4gIH0gQGVsc2UgaWYgJHZhbHVlID09IFwiZmxleC1lbmRcIiB7XG4gICAgJGFsdC12YWx1ZTogZW5kO1xuICB9IEBlbHNlIGlmICR2YWx1ZSA9PSBcInNwYWNlLWJldHdlZW5cIiB7XG4gICAgJGFsdC12YWx1ZToganVzdGlmeTtcbiAgfSBAZWxzZSBpZiAkdmFsdWUgPT0gXCJzcGFjZS1hcm91bmRcIiB7XG4gICAgJGFsdC12YWx1ZTogZGlzdHJpYnV0ZTtcbiAgfVxuXG4gIC8vIDIwMDlcbiAgQGluY2x1ZGUgcHJlZml4ZXIoYm94LXBhY2ssICRhbHQtdmFsdWUsIHdlYmtpdCBtb3ogc3BlYyk7XG5cbiAgLy8gMjAxMlxuICBAaW5jbHVkZSBwcmVmaXhlcihqdXN0aWZ5LWNvbnRlbnQsICR2YWx1ZSwgd2Via2l0IG1veiBtcyBvIHNwZWMpO1xuXG4gIC8vIDIwMTEgKElFIDEwKVxuICAtbXMtZmxleC1wYWNrOiAkYWx0LXZhbHVlO1xufVxuXG4vLyAyMDA5IC0gYm94LWFsaWduIChzdGFydCB8IGVuZCB8IGNlbnRlciB8IGJhc2VsaW5lIHwgc3RyZXRjaClcbi8vIDIwMTEgLSBmbGV4LWFsaWduIChzdGFydCB8IGVuZCB8IGNlbnRlciB8IGJhc2VsaW5lIHwgc3RyZXRjaClcbi8vIDIwMTIgLSBhbGlnbi1pdGVtcyAoZmxleC1zdGFydCB8IGZsZXgtZW5kIHwgY2VudGVyIHwgYmFzZWxpbmUgfCBzdHJldGNoKVxuQG1peGluIGFsaWduLWl0ZW1zKCR2YWx1ZTogc3RyZXRjaCkge1xuXG4gICRhbHQtdmFsdWU6ICR2YWx1ZTtcblxuICBAaWYgJHZhbHVlID09IFwiZmxleC1zdGFydFwiIHtcbiAgICAkYWx0LXZhbHVlOiBzdGFydDtcbiAgfSBAZWxzZSBpZiAkdmFsdWUgPT0gXCJmbGV4LWVuZFwiIHtcbiAgICAkYWx0LXZhbHVlOiBlbmQ7XG4gIH1cblxuICAvLyAyMDA5XG4gIEBpbmNsdWRlIHByZWZpeGVyKGJveC1hbGlnbiwgJGFsdC12YWx1ZSwgd2Via2l0IG1veiBzcGVjKTtcblxuICAvLyAyMDEyXG4gIEBpbmNsdWRlIHByZWZpeGVyKGFsaWduLWl0ZW1zLCAkdmFsdWUsIHdlYmtpdCBtb3ogbXMgbyBzcGVjKTtcblxuICAvLyAyMDExIChJRSAxMClcbiAgLW1zLWZsZXgtYWxpZ246ICRhbHQtdmFsdWU7XG59XG5cbi8vIDIwMTEgLSBmbGV4LWl0ZW0tYWxpZ24gKGF1dG8gfCBzdGFydCB8IGVuZCB8IGNlbnRlciB8IGJhc2VsaW5lIHwgc3RyZXRjaClcbi8vIDIwMTIgLSBhbGlnbi1zZWxmIChhdXRvIHwgZmxleC1zdGFydCB8IGZsZXgtZW5kIHwgY2VudGVyIHwgYmFzZWxpbmUgfCBzdHJldGNoKVxuQG1peGluIGFsaWduLXNlbGYoJHZhbHVlOiBhdXRvKSB7XG5cbiAgJHZhbHVlLTIwMTE6ICR2YWx1ZTtcbiAgQGlmICR2YWx1ZSA9PSBcImZsZXgtc3RhcnRcIiB7XG4gICAgJHZhbHVlLTIwMTE6IHN0YXJ0O1xuICB9IEBlbHNlIGlmICR2YWx1ZSA9PSBcImZsZXgtZW5kXCIge1xuICAgICR2YWx1ZS0yMDExOiBlbmQ7XG4gIH1cblxuICAvLyAyMDEyXG4gIEBpbmNsdWRlIHByZWZpeGVyKGFsaWduLXNlbGYsICR2YWx1ZSwgd2Via2l0IG1veiBzcGVjKTtcblxuICAvLyAyMDExIChJRSAxMClcbiAgLW1zLWZsZXgtaXRlbS1hbGlnbjogJHZhbHVlLTIwMTE7XG59XG5cbi8vIDIwMTEgLSBmbGV4LWxpbmUtcGFjayAoc3RhcnQgfCBlbmQgfCBjZW50ZXIgfCBqdXN0aWZ5IHwgZGlzdHJpYnV0ZSB8IHN0cmV0Y2gpXG4vLyAyMDEyIC0gYWxpZ24tY29udGVudCAoZmxleC1zdGFydCB8IGZsZXgtZW5kIHwgY2VudGVyIHwgc3BhY2UtYmV0d2VlbiB8IHNwYWNlLWFyb3VuZCB8IHN0cmV0Y2gpXG5AbWl4aW4gYWxpZ24tY29udGVudCgkdmFsdWU6IHN0cmV0Y2gpIHtcblxuICAkdmFsdWUtMjAxMTogJHZhbHVlO1xuICBAaWYgJHZhbHVlID09IFwiZmxleC1zdGFydFwiIHtcbiAgICAkdmFsdWUtMjAxMTogc3RhcnQ7XG4gIH0gQGVsc2UgaWYgJHZhbHVlID09IFwiZmxleC1lbmRcIiB7XG4gICAgJHZhbHVlLTIwMTE6IGVuZDtcbiAgfSBAZWxzZSBpZiAkdmFsdWUgPT0gXCJzcGFjZS1iZXR3ZWVuXCIge1xuICAgICR2YWx1ZS0yMDExOiBqdXN0aWZ5O1xuICB9IEBlbHNlIGlmICR2YWx1ZSA9PSBcInNwYWNlLWFyb3VuZFwiIHtcbiAgICAkdmFsdWUtMjAxMTogZGlzdHJpYnV0ZTtcbiAgfVxuXG4gIC8vIDIwMTJcbiAgQGluY2x1ZGUgcHJlZml4ZXIoYWxpZ24tY29udGVudCwgJHZhbHVlLCB3ZWJraXQgbW96IHNwZWMpO1xuXG4gIC8vIDIwMTEgKElFIDEwKVxuICAtbXMtZmxleC1saW5lLXBhY2s6ICR2YWx1ZS0yMDExO1xufVxuIiwiQG1peGluIGZvbnQtbGluZSgkcHQpIHtcbiAgZm9udC1zaXplICA6ICRwdDtcbiAgbGluZS1oZWlnaHQ6ICRwdCAqIDEuMjA7XG59XG5cbkBtaXhpbiB2ZXJ0aWNhbC1hbGlnbi1taWRkbGUoKSB7XG4gID4gKiB7XG4gICAgZGlzcGxheSAgICAgICA6IGlubGluZS1ibG9jaztcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICB9XG59XG5cbkBtaXhpbiBiZy1pbWFnZS1yYXRpbygkbG93LCAkaGlnaCkge1xuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuXG4gIEBtZWRpYSAoLXdlYmtpdC1tYXgtZGV2aWNlLXBpeGVsLXJhdGlvOiAxLjk5KSwgKG1heC1yZXNvbHV0aW9uOiAxOTFkcGkpIHtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJGxvdyk7XG4gIH1cblxuICBAbWVkaWEgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMiksIChtaW4tcmVzb2x1dGlvbjogMTkyZHBpKSB7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCRoaWdoKTtcbiAgfVxufVxuXG5AbWl4aW4gYmctY292ZXIoJHNyYykge1xuICBiYWNrZ3JvdW5kICAgICAgICAgICAgIDogdXJsKCRzcmMpIG5vLXJlcGVhdCBjZW50ZXIgY2VudGVyO1xuICAtd2Via2l0LWJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gIC1tb3otYmFja2dyb3VuZC1zaXplICAgOiBjb3ZlcjtcbiAgLW8tYmFja2dyb3VuZC1zaXplICAgICA6IGNvdmVyO1xuICBiYWNrZ3JvdW5kLXNpemUgICAgICAgIDogY292ZXI7XG59XG5cbkBtaXhpbiBmbGV4LWNlbnRlcigkanVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0LCAkbWFyZ2luOiAnJykge1xuICBAaW5jbHVkZSBkaXNwbGF5KGZsZXgpO1xuICBAaW5jbHVkZSBqdXN0aWZ5LWNvbnRlbnQoJGp1c3RpZnktY29udGVudCk7XG4gIEBpbmNsdWRlIGFsaWduLWl0ZW1zKGNlbnRlcik7XG4gIEBpbmNsdWRlIGZsZXgtd3JhcCh3cmFwKTtcblxuICBAaWYgJG1hcmdpbiAhPSAnJyB7XG4gICAgPiAqIHtcbiAgICAgIG1hcmdpbi1ib3R0b206ICRtYXJnaW47XG4gICAgICBtYXJnaW4tcmlnaHQ6ICRtYXJnaW5cbiAgICB9XG4gIH1cbn1cblxuQG1peGluIGJsb2NrLWNlbnRlcigpIHtcbiAgZGlzcGxheSAgICAgOiBibG9jaztcbiAgbWFyZ2luLWxlZnQgOiBhdXRvO1xuICBtYXJnaW4tcmlnaHQ6IGF1dG87XG59IiwiLy8gZGlzYWJsZSBib3JkZXItYm94LXNpemluZyBpbiBib3VyYm9uLW5lYXRcbiRib3JkZXItYm94LXNpemluZzogZmFsc2U7XG5cbiRzcGFjaW5nICAgICAgICAgOiAxNHB4O1xuJHNwYWNpbmctYmlnICAgICA6IDE4cHg7XG4kc3BhY2luZy1iaWdnZXN0IDogMjRweDtcbiRzcGFjaW5nLXNtYWxsICAgOiAxMHB4O1xuJHNwYWNpbmctc21hbGxlc3Q6IDZweDtcblxuJHNwYWNpbmcgICAgICAgICA6IDE0cHg7XG4kc3BhY2luZy1iaWcgICAgIDogMThweDtcbiRzcGFjaW5nLWJpZ2dlc3QgOiAyNHB4O1xuJHNwYWNpbmctc21hbGwgICA6IDEwcHg7XG4kc3BhY2luZy1zbWFsbGVzdDogNnB4O1xuXG4kcGFkZGluZyAgICAgICAgIDogMTZweDtcbiRwYWRkaW5nLWJpZyAgICAgOiAzMnB4O1xuJHBhZGRpbmctYmlnZ2VzdCA6IDY0cHg7XG4kcGFkZGluZy1zbWFsbCAgIDogOHB4O1xuJHBhZGRpbmctc21hbGxlc3Q6IDRweDtcblxuJG1hcmdpbiAgICAgICAgIDogMzJweDtcbiRtYXJnaW4tYmlnICAgICA6IDY0cHg7XG4kbWFyZ2luLWJpZ2dlc3QgOiAxMjhweDtcbiRtYXJnaW4tc21hbGwgICA6IDE2cHg7XG4kbWFyZ2luLXNtYWxsZXN0OiA4cHg7XG5cbiRmb250LXNpemUgICAgICAgICA6IDE0cHg7XG4kZm9udC1zaXplLWJpZyAgICAgOiAxOHB4O1xuJGZvbnQtc2l6ZS1iaWdnZXN0IDogMjRweDtcbiRmb250LXNpemUtc21hbGwgICA6IDEwcHg7XG4kZm9udC1zaXplLXNtYWxsZXN0OiA4cHg7XG5cbiRsaW5lLWhlaWdodCAgICAgICAgIDogMTZweDtcbiRsaW5lLWhlaWdodC1iaWcgICAgIDogMjBweDtcbiRsaW5lLWhlaWdodC1iaWdnZXN0IDogMjZweDtcbiRsaW5lLWhlaWdodC1zbWFsbCAgIDogMTJweDtcbiRsaW5lLWhlaWdodC1zbWFsbGVzdDogMTBweDtcblxuJGJvcmRlci1yYWRpdXMgICAgICAgICA6IDZweDtcbiRib3JkZXItcmFkaXVzLWJpZyAgICAgOiA4cHg7XG4kYm9yZGVyLXJhZGl1cy1iaWdnZXN0IDogMTBweDtcbiRib3JkZXItcmFkaXVzLXNtYWxsICAgOiA0cHg7XG4kYm9yZGVyLXJhZGl1cy1zbWFsbGVzdDogMnB4O1xuXG4kYmxhY2s6ICMwMDA7XG4kd2hpdGU6ICNmZmY7XG5cbiRwcmltYXJ5LWNvbG9yOiAjMDBhZWZmO1xuJGFjY2VudC1jb2xvciA6ICMwMDk2ZmY7XG4kc3VjY2Vzcy1jb2xvcjogIzk5Y2MwMDtcbiRkYW5nZXItY29sb3IgOiAjZmYwMDY2O1xuJHdhcm5pbmctY29sb3I6ICNEQUQ3MTQ7XG5cbiRuZXV0cmFsLWNvbG9yICAgICAgICAgOiAjYjdiN2I3O1xuJG5ldXRyYWwtY29sb3ItZGFyayAgICA6ICM3ZjdmN2Y7XG4kbmV1dHJhbC1jb2xvci1kYXJrZXN0IDogIzNkM2QzZDtcbiRuZXV0cmFsLWNvbG9yLWxpZ2h0ICAgOiAjZDFkM2Q0O1xuJG5ldXRyYWwtY29sb3ItbGlnaHRlc3Q6ICNmMGYwZjA7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0= */
checkbox {
  display: -webkit-box;
  display: -moz-box;
  display: box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: start;
  -moz-box-pack: start;
  box-pack: start;
  -webkit-justify-content: flex-start;
  -moz-justify-content: flex-start;
  -ms-justify-content: flex-start;
  -o-justify-content: flex-start;
  justify-content: flex-start;
  -ms-flex-pack: start;
  -webkit-box-align: center;
  -moz-box-align: center;
  box-align: center;
  -webkit-align-items: center;
  -moz-align-items: center;
  -ms-align-items: center;
  -o-align-items: center;
  align-items: center;
  -ms-flex-align: center;
  -webkit-box-lines: multiple;
  -moz-box-lines: multiple;
  box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -moz-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap; }
  checkbox button.clean {
    border-radius: 50%;
    background-color: #00aeff;
    padding: 6px; }
    checkbox button.clean .icon {
      visibility: hidden; }
    checkbox button.clean.checked .icon {
      visibility: visible; }
  checkbox label {
    margin-left: 6px; }


/*# sourceMappingURL=data:application/json;base64, */
selected-button {
  display: block; }
  selected-button button {
    position: relative;
    width: 160px; }
    selected-button button .icon-container {
      visibility: hidden; }
    selected-button button.checked .icon-container {
      visibility: visible; }
    selected-button button .icon-container {
      display: -webkit-box;
      display: -moz-box;
      display: box;
      display: -webkit-flex;
      display: -moz-flex;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: distribute;
      -moz-box-pack: distribute;
      box-pack: distribute;
      -webkit-justify-content: space-around;
      -moz-justify-content: space-around;
      -ms-justify-content: space-around;
      -o-justify-content: space-around;
      justify-content: space-around;
      -ms-flex-pack: distribute;
      -webkit-box-align: center;
      -moz-box-align: center;
      box-align: center;
      -webkit-align-items: center;
      -moz-align-items: center;
      -ms-align-items: center;
      -o-align-items: center;
      align-items: center;
      -ms-flex-align: center;
      -webkit-box-lines: multiple;
      -moz-box-lines: multiple;
      box-lines: multiple;
      -webkit-flex-wrap: wrap;
      -moz-flex-wrap: wrap;
      -ms-flex-wrap: wrap;
      flex-wrap: wrap;
      position: absolute;
      top: 0;
      right: 0;
      height: 100%;
      margin-right: 6px; }


/*# sourceMappingURL=data:application/json;base64, */
button.selected-button {
  display: block;
  position: relative;
  padding-left: 32px;
  padding-right: 32px; }
  button.selected-button .icon-container {
    visibility: hidden; }
  button.selected-button.checked .icon-container {
    visibility: visible; }
  button.selected-button .icon-container {
    display: -webkit-box;
    display: -moz-box;
    display: box;
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: distribute;
    -moz-box-pack: distribute;
    box-pack: distribute;
    -webkit-justify-content: space-around;
    -moz-justify-content: space-around;
    -ms-justify-content: space-around;
    -o-justify-content: space-around;
    justify-content: space-around;
    -ms-flex-pack: distribute;
    -webkit-box-align: center;
    -moz-box-align: center;
    box-align: center;
    -webkit-align-items: center;
    -moz-align-items: center;
    -ms-align-items: center;
    -o-align-items: center;
    align-items: center;
    -ms-flex-align: center;
    -webkit-box-lines: multiple;
    -moz-box-lines: multiple;
    box-lines: multiple;
    -webkit-flex-wrap: wrap;
    -moz-flex-wrap: wrap;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
    position: absolute;
    top: 0;
    right: 0;
    height: 100%;
    margin-right: 6px; }


/*# sourceMappingURL=data:application/json;base64, */