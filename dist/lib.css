avatar {
  display: block;
  width: 35px;
  height: 35px;
  border-radius: 50%;
  background-color: #eee;
  overflow: hidden; }
  avatar img {
    width: 100%;
    height: 100%; }


/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlcy9hdmF0YXIuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTtFQUNFLEFBQWtCO0VBSEYsQUFJaEI7RUFKZ0IsQUFLaEI7RUFDQSxBQUFrQjtFQUNsQixBQUFrQjtFQUNsQixBQUFrQjtFQUVwQixBQUFPO0lBQ0gsQUFBUTtJQUNSLEFBQVEiLCJmaWxlIjoic3R5bGVzL2F2YXRhci5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIkYXZhdGFyLWRpYW1ldGVyOiAzNXB4O1xuXG5hdmF0YXIge1xuICBkaXNwbGF5ICAgICAgICAgOiBibG9jaztcbiAgd2lkdGggICAgICAgICAgIDogJGF2YXRhci1kaWFtZXRlcjtcbiAgaGVpZ2h0ICAgICAgICAgIDogJGF2YXRhci1kaWFtZXRlcjtcbiAgYm9yZGVyLXJhZGl1cyAgIDogNTAlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xuICBvdmVyZmxvdyAgICAgICAgOiBoaWRkZW47XG5cbiAgaW1nIHtcbiAgICB3aWR0aCA6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0= */

loader {
  position: absolute;
  display: flex;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  justify-content: center;
  align-items: center; }
  loader .container {
    padding: 24px;
    opacity: .98;
    border-radius: 10px; }
  loader .loader {
    width: 50px;
    height: 50px;
    border-top: 10px solid #d7d5d5;
    border-right: 10px solid #d7d5d5;
    border-bottom: 10px solid #d7d5d5;
    border-left: 10px solid #f2f2f2;
    -webkit-transform: translateZ(0);
    -ms-transform: translateZ(0);
    transform: translateZ(0);
    -webkit-animation: load8 .8s infinite linear;
    animation: load8 .8s infinite linear; }
  loader .loader, loader .loader:after {
    border-radius: 50%; }

@-webkit-keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg); }

  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg); } }

@keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg); }

  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg); } }


/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlcy9sb2FkZXIuc2NzcyIsIi4uL25vZGVfbW9kdWxlcy9hcHBpcmlvLXdvcmstc3R5bGVzL3N0eWxlcy9fdmFyaWFibGVzLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7RUFDRSxBQUFpQjtFQUNqQixBQUFpQjtFQUNqQixBQUFpQjtFQUNqQixBQUFpQjtFQUNqQixBQUFpQjtFQUNqQixBQUFpQjtFQUNqQixBQUFpQjtFQUNqQixBQUFpQjtFQUVuQixBQUFPO0lDRFksQURFZjtJQUVBLEFBQWtCO0lDMEJHLEFEekJyQjtFQUdKLEFBQU87SUFDSCxBQUFPO0lBQ1AsQUFBUTtJQUNSLEFBQW1CO0lBQ25CLEFBQW1CO0lBQ25CLEFBQW1CO0lBQ25CLEFBQW1CO0lBQ25CLEFBQW1CO0lBQ25CLEFBQW1CO0lBQ25CLEFBQW1CO0lBQ25CLEFBQW1CO0lBQ25CLEFBQW1CO0VBRXZCLEFBQU8sQUFBUyxBQUFPLEFBQU87SUFFMUIsQUFBZTs7bUJBTUE7RUFDbkI7SUFDSSxBQUFtQjtJQUNuQixBQUFXOztFQUVmO0lBQ0ksQUFBbUI7SUFDbkIsQUFBVzs7V0FJSjtFQUNYO0lBQ0ksQUFBbUI7SUFDbkIsQUFBVzs7RUFFZjtJQUNJLEFBQW1CO0lBQ25CLEFBQVciLCJmaWxlIjoic3R5bGVzL2xvYWRlci5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJAaW1wb3J0IFwid29yay1pbmNsdWRlc1wiO1xuXG5sb2FkZXIge1xuICBwb3NpdGlvbiAgICAgICA6IGFic29sdXRlO1xuICBkaXNwbGF5ICAgICAgICA6IGZsZXg7XG4gIHRvcCAgICAgICAgICAgIDogMDtcbiAgbGVmdCAgICAgICAgICAgOiAwO1xuICB3aWR0aCAgICAgICAgICA6IDEwMCU7XG4gIGhlaWdodCAgICAgICAgIDogMTAwJTtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zICAgIDogY2VudGVyO1xuXG4gIC5jb250YWluZXIge1xuICAgIHBhZGRpbmcgICAgICAgICA6ICRzcGFjaW5nLWJpZ2dlc3Q7XG4gICAgLy8gYmFja2dyb3VuZC1jb2xvcjogJHByaW1hcnktY29sb3I7XG4gICAgb3BhY2l0eSAgICAgICAgIDogLjk4O1xuICAgIGJvcmRlci1yYWRpdXMgICA6ICRib3JkZXItcmFkaXVzLWJpZ2dlc3Q7XG4gIH1cblxuICAubG9hZGVyIHtcbiAgICB3aWR0aDogNTBweDtcbiAgICBoZWlnaHQ6IDUwcHg7XG4gICAgYm9yZGVyLXRvcCAgICAgICA6IDEwcHggc29saWQgJG5ldXRyYWwtY29sb3ItbGlnaHQ7XG4gICAgYm9yZGVyLXJpZ2h0ICAgICA6IDEwcHggc29saWQgJG5ldXRyYWwtY29sb3ItbGlnaHQ7XG4gICAgYm9yZGVyLWJvdHRvbSAgICA6IDEwcHggc29saWQgJG5ldXRyYWwtY29sb3ItbGlnaHQ7XG4gICAgYm9yZGVyLWxlZnQgICAgICA6IDEwcHggc29saWQgJG5ldXRyYWwtY29sb3ItbGlnaHRlc3QgO1xuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xuICAgIC1tcy10cmFuc2Zvcm0gICAgOiB0cmFuc2xhdGVaKDApO1xuICAgIHRyYW5zZm9ybSAgICAgICAgOiB0cmFuc2xhdGVaKDApO1xuICAgIC13ZWJraXQtYW5pbWF0aW9uOiBsb2FkOCAuOHMgaW5maW5pdGUgbGluZWFyO1xuICAgIGFuaW1hdGlvbiAgICAgICAgOiBsb2FkOCAuOHMgaW5maW5pdGUgbGluZWFyO1xuICB9XG4gIC5sb2FkZXIsXG4gIC5sb2FkZXI6YWZ0ZXIge1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgfVxuXG5cbn1cblxuQC13ZWJraXQta2V5ZnJhbWVzIGxvYWQ4IHtcbiAgMCUge1xuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XG4gIH1cbiAgMTAwJSB7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XG4gIH1cbn1cblxuQGtleWZyYW1lcyBsb2FkOCB7XG4gIDAlIHtcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICB9XG4gIDEwMCUge1xuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICB9XG59IiwiLy8gZGlzYWJsZSBib3JkZXItYm94LXNpemluZyBpbiBib3VyYm9uLW5lYXRcbiRib3JkZXItYm94LXNpemluZzogZmFsc2U7XG5cbiRzcGFjaW5nICAgICAgICAgOiAxNHB4O1xuJHNwYWNpbmctYmlnICAgICA6IDE4cHg7XG4kc3BhY2luZy1iaWdnZXN0IDogMjRweDtcbiRzcGFjaW5nLXNtYWxsICAgOiAxMHB4O1xuJHNwYWNpbmctc21hbGxlc3Q6IDZweDtcblxuJHNwYWNpbmcgICAgICAgICA6IDE0cHg7XG4kc3BhY2luZy1iaWcgICAgIDogMThweDtcbiRzcGFjaW5nLWJpZ2dlc3QgOiAyNHB4O1xuJHNwYWNpbmctc21hbGwgICA6IDEwcHg7XG4kc3BhY2luZy1zbWFsbGVzdDogNnB4O1xuXG4kcGFkZGluZyAgICAgICAgIDogMTZweDtcbiRwYWRkaW5nLWJpZyAgICAgOiAzMnB4O1xuJHBhZGRpbmctYmlnZ2VzdCA6IDY0cHg7XG4kcGFkZGluZy1zbWFsbCAgIDogOHB4O1xuJHBhZGRpbmctc21hbGxlc3Q6IDRweDtcblxuJG1hcmdpbiAgICAgICAgIDogMzJweDtcbiRtYXJnaW4tYmlnICAgICA6IDY0cHg7XG4kbWFyZ2luLWJpZ2dlc3QgOiAxMjhweDtcbiRtYXJnaW4tc21hbGwgICA6IDE2cHg7XG4kbWFyZ2luLXNtYWxsZXN0OiA4cHg7XG5cbiRmb250LXNpemUtc21hbGxlc3Q6IDEycHg7XG4kZm9udC1zaXplLXNtYWxsICAgOiAxNHB4O1xuJGZvbnQtc2l6ZSAgICAgICAgIDogMTVweDtcbiRmb250LXNpemUtYmlnICAgICA6IDE2cHg7XG4kZm9udC1zaXplLWJpZ2dlc3QgOiAxOHB4O1xuXG4kbGluZS1oZWlnaHQtc21hbGxlc3Q6IDE1cHg7XG4kbGluZS1oZWlnaHQtc21hbGwgICA6IDE4cHg7XG4kbGluZS1oZWlnaHQgICAgICAgICA6IDE5cHg7XG4kbGluZS1oZWlnaHQtYmlnICAgICA6IDIwcHg7XG4kbGluZS1oZWlnaHQtYmlnZ2VzdCA6IDIzcHg7XG5cbiRib3JkZXItcmFkaXVzICAgICAgICAgOiA2cHg7XG4kYm9yZGVyLXJhZGl1cy1iaWcgICAgIDogOHB4O1xuJGJvcmRlci1yYWRpdXMtYmlnZ2VzdCA6IDEwcHg7XG4kYm9yZGVyLXJhZGl1cy1zbWFsbCAgIDogNHB4O1xuJGJvcmRlci1yYWRpdXMtc21hbGxlc3Q6IDJweDtcblxuJGJsYWNrOiAjM2UzZTNlO1xuJHdoaXRlOiAjZmZmO1xuXG4kcHJpbWFyeS1jb2xvciAgICAgICAgOiAjMDBhZWZmO1xuJHByaW1hcnktY29sb3ItbGlnaHQgIDogI2RkZjJmZDtcbiRwcmltYXJ5LWNvbG9yLWRhcmsgICA6ICMwMDk2ZmY7XG4kc3VjY2Vzcy1jb2xvciAgICAgICAgOiAjOTljYzAwO1xuJGRhbmdlci1jb2xvciAgICAgICAgIDogI2ZmMDA2NjtcbiRkYW5nZXItY29sb3ItbGlnaHQgICA6ICNlZDc4Nzg7XG4kZGFuZ2VyLWNvbG9yLWxpZ2h0ZXN0OiAjZmZjY2UxO1xuXG4kbmV1dHJhbC1jb2xvciAgICAgICAgIDogI2MzYzFjMTtcbiRuZXV0cmFsLWNvbG9yLWRhcmsgICAgOiAjOGM4YjhiO1xuJG5ldXRyYWwtY29sb3ItZGFya2VzdCA6ICM0QTRBNEE7XG4kbmV1dHJhbC1jb2xvci1saWdodCAgIDogI2Q3ZDVkNTtcbiRuZXV0cmFsLWNvbG9yLWxpZ2h0ZXN0OiAjZjJmMmYyO1xuXG4kZm9udC13ZWlnaHQgICAgICAgICA6IDQwMDtcbiRmb250LXdlaWdodC1saWdodCAgIDogMzAwO1xuJGZvbnQtd2VpZ2h0LWxpZ2h0ZXN0OiAyMDA7XG4kZm9udC13ZWlnaHQtYm9sZCAgICA6IDcwMDtcbiRmb250LXdlaWdodC1ib2xkZXN0IDogNzAwO1xuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0= */

#modal-overlay {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  z-index: 10;
  background-color: rgba(0, 0, 0, 0.6); }

modal {
  -webkit-box-align: center;
  -moz-box-align: center;
  box-align: center;
  -webkit-align-items: center;
  -moz-align-items: center;
  -ms-align-items: center;
  -o-align-items: center;
  align-items: center;
  -ms-flex-align: center;
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1000; }
  modal.show {
    display: -webkit-box;
    display: -moz-box;
    display: box;
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: center;
    -moz-box-pack: center;
    box-pack: center;
    -webkit-justify-content: center;
    -moz-justify-content: center;
    -ms-justify-content: center;
    -o-justify-content: center;
    justify-content: center;
    -ms-flex-pack: center;
    -webkit-box-align: center;
    -moz-box-align: center;
    box-align: center;
    -webkit-align-items: center;
    -moz-align-items: center;
    -ms-align-items: center;
    -o-align-items: center;
    align-items: center;
    -ms-flex-align: center;
    -webkit-box-lines: multiple;
    -moz-box-lines: multiple;
    box-lines: multiple;
    -webkit-flex-wrap: wrap;
    -moz-flex-wrap: wrap;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap; }
  modal .close {
    position: absolute;
    right: 14px;
    top: 14px;
    padding: 10px;
    background-color: white;
    z-index: 1000; }


/*# sourceMappingURL=data:application/json;base64, */

checkbox {
  display: block; }
  checkbox label {
    margin-left: 8px; }
  checkbox .icon, checkbox button {
    width: 24px;
    height: 24px;
    /* fixing jumping issues on webkit */
    outline: none;
    overflow: hidden; }


/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlcy9jaGVja2JveC5zY3NzIiwiLi4vbm9kZV9tb2R1bGVzL2FwcGlyaW8td29yay1zdHlsZXMvc3R5bGVzL192YXJpYWJsZXMuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTtFQUNFLEFBQVM7RUFFWCxBQUFTO0lDb0JTLEFEbkJkO0VBR0osQUFBUyxBQUFPLEFBQVM7SUFDckIsQUFBVTtJQUNWLEFBQVU7O0lBRVYsQUFBVTtJQUNWLEFBQVUiLCJmaWxlIjoic3R5bGVzL2NoZWNrYm94LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIkBpbXBvcnQgXCJ3b3JrLWluY2x1ZGVzXCI7XG5cbmNoZWNrYm94IHtcbiAgZGlzcGxheTogYmxvY2s7XG5cbiAgbGFiZWwge1xuICAgIG1hcmdpbi1sZWZ0OiAkbWFyZ2luLXNtYWxsZXN0O1xuICB9XG5cbiAgLmljb24sIGJ1dHRvbiB7XG4gICAgd2lkdGggICA6IDI0cHg7XG4gICAgaGVpZ2h0ICA6IDI0cHg7XG4gICAgLyogZml4aW5nIGp1bXBpbmcgaXNzdWVzIG9uIHdlYmtpdCAqL1xuICAgIG91dGxpbmUgOiBub25lO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gIH1cbn0iLCIvLyBkaXNhYmxlIGJvcmRlci1ib3gtc2l6aW5nIGluIGJvdXJib24tbmVhdFxuJGJvcmRlci1ib3gtc2l6aW5nOiBmYWxzZTtcblxuJHNwYWNpbmcgICAgICAgICA6IDE0cHg7XG4kc3BhY2luZy1iaWcgICAgIDogMThweDtcbiRzcGFjaW5nLWJpZ2dlc3QgOiAyNHB4O1xuJHNwYWNpbmctc21hbGwgICA6IDEwcHg7XG4kc3BhY2luZy1zbWFsbGVzdDogNnB4O1xuXG4kc3BhY2luZyAgICAgICAgIDogMTRweDtcbiRzcGFjaW5nLWJpZyAgICAgOiAxOHB4O1xuJHNwYWNpbmctYmlnZ2VzdCA6IDI0cHg7XG4kc3BhY2luZy1zbWFsbCAgIDogMTBweDtcbiRzcGFjaW5nLXNtYWxsZXN0OiA2cHg7XG5cbiRwYWRkaW5nICAgICAgICAgOiAxNnB4O1xuJHBhZGRpbmctYmlnICAgICA6IDMycHg7XG4kcGFkZGluZy1iaWdnZXN0IDogNjRweDtcbiRwYWRkaW5nLXNtYWxsICAgOiA4cHg7XG4kcGFkZGluZy1zbWFsbGVzdDogNHB4O1xuXG4kbWFyZ2luICAgICAgICAgOiAzMnB4O1xuJG1hcmdpbi1iaWcgICAgIDogNjRweDtcbiRtYXJnaW4tYmlnZ2VzdCA6IDEyOHB4O1xuJG1hcmdpbi1zbWFsbCAgIDogMTZweDtcbiRtYXJnaW4tc21hbGxlc3Q6IDhweDtcblxuJGZvbnQtc2l6ZS1zbWFsbGVzdDogMTJweDtcbiRmb250LXNpemUtc21hbGwgICA6IDE0cHg7XG4kZm9udC1zaXplICAgICAgICAgOiAxNXB4O1xuJGZvbnQtc2l6ZS1iaWcgICAgIDogMTZweDtcbiRmb250LXNpemUtYmlnZ2VzdCA6IDE4cHg7XG5cbiRsaW5lLWhlaWdodC1zbWFsbGVzdDogMTVweDtcbiRsaW5lLWhlaWdodC1zbWFsbCAgIDogMThweDtcbiRsaW5lLWhlaWdodCAgICAgICAgIDogMTlweDtcbiRsaW5lLWhlaWdodC1iaWcgICAgIDogMjBweDtcbiRsaW5lLWhlaWdodC1iaWdnZXN0IDogMjNweDtcblxuJGJvcmRlci1yYWRpdXMgICAgICAgICA6IDZweDtcbiRib3JkZXItcmFkaXVzLWJpZyAgICAgOiA4cHg7XG4kYm9yZGVyLXJhZGl1cy1iaWdnZXN0IDogMTBweDtcbiRib3JkZXItcmFkaXVzLXNtYWxsICAgOiA0cHg7XG4kYm9yZGVyLXJhZGl1cy1zbWFsbGVzdDogMnB4O1xuXG4kYmxhY2s6ICMzZTNlM2U7XG4kd2hpdGU6ICNmZmY7XG5cbiRwcmltYXJ5LWNvbG9yICAgICAgICA6ICMwMGFlZmY7XG4kcHJpbWFyeS1jb2xvci1saWdodCAgOiAjZGRmMmZkO1xuJHByaW1hcnktY29sb3ItZGFyayAgIDogIzAwOTZmZjtcbiRzdWNjZXNzLWNvbG9yICAgICAgICA6ICM5OWNjMDA7XG4kZGFuZ2VyLWNvbG9yICAgICAgICAgOiAjZmYwMDY2O1xuJGRhbmdlci1jb2xvci1saWdodCAgIDogI2VkNzg3ODtcbiRkYW5nZXItY29sb3ItbGlnaHRlc3Q6ICNmZmNjZTE7XG5cbiRuZXV0cmFsLWNvbG9yICAgICAgICAgOiAjYzNjMWMxO1xuJG5ldXRyYWwtY29sb3ItZGFyayAgICA6ICM4YzhiOGI7XG4kbmV1dHJhbC1jb2xvci1kYXJrZXN0IDogIzRBNEE0QTtcbiRuZXV0cmFsLWNvbG9yLWxpZ2h0ICAgOiAjZDdkNWQ1O1xuJG5ldXRyYWwtY29sb3ItbGlnaHRlc3Q6ICNmMmYyZjI7XG5cbiRmb250LXdlaWdodCAgICAgICAgIDogNDAwO1xuJGZvbnQtd2VpZ2h0LWxpZ2h0ICAgOiAzMDA7XG4kZm9udC13ZWlnaHQtbGlnaHRlc3Q6IDIwMDtcbiRmb250LXdlaWdodC1ib2xkICAgIDogNzAwO1xuJGZvbnQtd2VpZ2h0LWJvbGRlc3QgOiA3MDA7XG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ== */

selected-button {
  display: block; }
  selected-button button {
    position: relative;
    width: 160px; }
    selected-button button .icon-container {
      visibility: hidden; }
    selected-button button.checked .icon-container {
      visibility: visible; }
    selected-button button .icon-container {
      display: -webkit-box;
      display: -moz-box;
      display: box;
      display: -webkit-flex;
      display: -moz-flex;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: distribute;
      -moz-box-pack: distribute;
      box-pack: distribute;
      -webkit-justify-content: space-around;
      -moz-justify-content: space-around;
      -ms-justify-content: space-around;
      -o-justify-content: space-around;
      justify-content: space-around;
      -ms-flex-pack: distribute;
      -webkit-box-align: center;
      -moz-box-align: center;
      box-align: center;
      -webkit-align-items: center;
      -moz-align-items: center;
      -ms-align-items: center;
      -o-align-items: center;
      align-items: center;
      -ms-flex-align: center;
      -webkit-box-lines: multiple;
      -moz-box-lines: multiple;
      box-lines: multiple;
      -webkit-flex-wrap: wrap;
      -moz-flex-wrap: wrap;
      -ms-flex-wrap: wrap;
      flex-wrap: wrap;
      position: absolute;
      top: 0;
      right: 0;
      height: 100%;
      margin-right: 6px; }


/*# sourceMappingURL=data:application/json;base64, */

button.selected-button {
  display: inline-block;
  position: relative;
  padding-left: 32px;
  padding-right: 32px; }
  button.selected-button .icon-container {
    visibility: hidden; }
  button.selected-button.checked .icon-container {
    visibility: visible; }
  button.selected-button .icon-container {
    display: -webkit-box;
    display: -moz-box;
    display: box;
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: distribute;
    -moz-box-pack: distribute;
    box-pack: distribute;
    -webkit-justify-content: space-around;
    -moz-justify-content: space-around;
    -ms-justify-content: space-around;
    -o-justify-content: space-around;
    justify-content: space-around;
    -ms-flex-pack: distribute;
    -webkit-box-align: center;
    -moz-box-align: center;
    box-align: center;
    -webkit-align-items: center;
    -moz-align-items: center;
    -ms-align-items: center;
    -o-align-items: center;
    align-items: center;
    -ms-flex-align: center;
    -webkit-box-lines: multiple;
    -moz-box-lines: multiple;
    box-lines: multiple;
    -webkit-flex-wrap: wrap;
    -moz-flex-wrap: wrap;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
    position: absolute;
    top: 0;
    right: 0;
    height: 100%;
    margin-right: 6px; }


/*# sourceMappingURL=data:application/json;base64, */
