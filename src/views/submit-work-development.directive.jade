header
  include nav

  img(src="/images/development-active.svg")

  h1 Let's build your app!

  p Help define the technical requirements for your app

.flush-height.flex.column(flush-height="lock")
  ul.dark-bg.flex.center.middle.flex-grow.selectable-choices
    li
      img.icon.biggest(ng-if="!vm.specsDefined" src="/images/define-dev-specs.svg")

      img.icon.biggest(ng-if="vm.specsDefined" src="/images/define-dev-specs-selected.svg")

      h4 Define Requirements

      //- p The Topcoder community has built thousands of mobile applications. Based on these projects, we have identified the most critical questions in defining the technical requirements. Your answers will help us estimate the likely cost and time required.

      p Answer some questions to help us estimate cost and time.

      button.action.wide(type="button" ng-click="vm.showDefineSpecs()") select

    li
      img.icon.biggest(ng-if="!vm.uploaderHasFiles || vm.uploaderHasErrors || vm.uploaderUploading" src="/images/upload.svg")

      img.icon.biggest(ng-if="vm.uploaderHasFiles && !vm.uploaderHasErrors && !vm.uploaderUploading" src="/images/upload-selected.svg")

      h4 Upload Requirements

      p Please upload any technical requirements.

      button.action.wide(ng-click="vm.uploadSpecs()") select

  .continue-buttons
    button.wider.save(ng-click="vm.save(true, false)") save

    button.wider.kick-off.action(ng-click="vm.save(true, true)") kick off project

modal.full.define-development(show="vm.showDefineSpecsModal" background-click-close=true)
  ul.nav
    li
      button.clean(ng-click="vm.viewPrevious()")
        .icon.arrow.smallest

    li
      button.clean(ng-click="vm.activateModal('offlineAccess')" ng-class="{active: vm.activeDevelopmentModal == 'offlineAccess'}") offline access

    li
      button.clean(ng-click="vm.activateModal('personalInformation')" ng-class="{active: vm.activeDevelopmentModal == 'personalInformation'}") personal information

    li
      button.clean(ng-click="vm.activateModal('security')" ng-class="{active: vm.activeDevelopmentModal == 'security'}") security level

    li
      button.clean(ng-click="vm.activateModal('thirdPartyIntegrations')" ng-class="{active: vm.activeDevelopmentModal == 'thirdPartyIntegrations'}") third party integrations

    li
      button.clean(ng-click="vm.viewNext()")
        .icon.arrow.smallest.right

  main.dark-bg.flex.column.center.flex-grow(ng-show= "vm.activeDevelopmentModal == 'offlineAccess'")
    h2 Does your application need offline access? 

    p Do your users need to be able to interact with the application when they are unable to connect to the internet (over the air or via wifi)?

    ul.or-choices.flex.center
      li
        button.big.widest(
          ng-model="vm.work.offlineAccess"
          label="yes"
          value="true"
          selectable="action"
          type="button"
        )

        p Users will need to use the app even when theyâ€™re offline. This feature increases complexity and cost.

      li.or
        .house OR

      li
        button.big.widest(
          ng-model="vm.work.offlineAccess"
          label="no"
          value="false"
          selectable="action"
          type="button"
        )

        p The application will gracefully present a message to users to please connect to the internet.

  main.dark-bg.flex.column.center.flex-grow(ng-show= "vm.activeDevelopmentModal == 'personalInformation'")
    h2 Personal information

    p Is there any personal user information that is stored or transmitted?

    ul.or-choices.flex.center
      li
        button.big.widest(
          ng-model="vm.work.usesPersonalInformation"
          label="yes"
          value="true"
          selectable="action"
          type="button"
        )

        p Storing or transmitting personal information requires security and encryption, adding complexity and cost.

      li.or
        .house OR

      li
        button.big.widest(
          ng-model="vm.work.usesPersonalInformation"
          label="no"
          value="false"
          selectable="action"
          type="button"
        )

        p The app is not transferring or storing personal information.

  main.dark-bg.security.flex.column.center.flex-grow(ng-show= "vm.activeDevelopmentModal == 'security'")
    h2 What level of security do you need?

    ul.selectable-choices.flex.center
      li
        img(src="/images/security-none.svg")

        h6 Standard

        p Includes https and other standard measures, which are sufficient for the majority of apps

        button.wide.action(selectable=true type="button" ng-model="vm.work.securityLevel" value="vm.securityLevels.none")

      li
        img(src="/images/security-minimal.svg")

        h6 Enhanced

        p Includes encrypting local data stores and other precautions; important when  sensitive data, such as medical information, is stored or viewed in the app

        button.wide.action(selectable=true type="button" ng-model="vm.work.securityLevel" value="vm.securityLevels.minimal")

      li
        img(src="/images/security-complete.svg")

        h6 Maximum security

        p Includes encrypting local data stores, custom certificate handling for all service calls, and other measures. Required only for highly-secure applications, such as those involving banking.

        button.wide.action(selectable=true type="button" ng-model="vm.work.securityLevel" value="vm.securityLevels.complete")

  main.dark-bg.third-party-integrations.flex.column.center.flex-grow(ng-show= "vm.activeDevelopmentModal == 'thirdPartyIntegrations'")
    h2 How many 3rd party integrations</strong>?

    p Enter the number of required 3rd party integrations. Examples include: Facebook, Twitter, Yelp, Google Maps, and Docusign.

    input(type="number" min=1 max=6 ng-model="vm.work.numberOfApiIntegrations")

  footer
    button.wider(ng-hide="vm.backButtonDisabled" ng-click="vm.viewPrevious()") back

    button.action.action.wider(ng-hide="vm.nextButtonDisabled" ng-click="vm.viewNext()") next

    button.action.wider(ng-show="vm.showFinishDevelopmentButton" ng-click="vm.save()") Save

modal.upload-documents(show="vm.showUploadSpecs" background-click-close=true)
  .upload
    img(src="/images/upload.svg")

    h2 Upload documents

    ap-uploader(
      config="vm.uploaderConfig"
      uploading="vm.uploaderUploading"
      has-errors="vm.uploaderHasErrors"
      has-files="vm.uploaderHasFiles"
    )
